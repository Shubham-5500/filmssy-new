version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: filmssy-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-filmssypassword}
      MONGO_INITDB_DATABASE: filmssy
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - filmssy-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: filmssy-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-filmssyredis}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - filmssy-network

  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: filmssy-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5000
      MONGODB_URI: mongodb://admin:${MONGO_PASSWORD:-filmssypassword}@mongodb:27017/filmssy?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-filmssyredis}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      RAZORPAY_KEY_SECRET: ${RAZORPAY_KEY_SECRET}
      TMDB_API_KEY: ${TMDB_API_KEY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      SENTRY_DSN: ${SENTRY_DSN}
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    networks:
      - filmssy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Frontend
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:5000}
        NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
        NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${NEXT_PUBLIC_GOOGLE_ANALYTICS_ID}
        NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
    container_name: filmssy-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - filmssy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Dashboard
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:5000}
        NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_ADMIN_URL:-http://localhost:3001}
    container_name: filmssy-admin
    restart: unless-stopped
    ports:
      - "3001:3000"
    depends_on:
      - api
    networks:
      - filmssy-network

  # Video Processing Worker
  video-processor:
    build:
      context: ./services/video-processor
      dockerfile: Dockerfile
    container_name: filmssy-video-processor
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      MONGODB_URI: mongodb://admin:${MONGO_PASSWORD:-filmssypassword}@mongodb:27017/filmssy?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-filmssyredis}@redis:6379
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./services/video-processor/temp:/app/temp
      - ./services/video-processor/logs:/app/logs
    networks:
      - filmssy-network

  # Notification Service
  notification-service:
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    container_name: filmssy-notification
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      MONGODB_URI: mongodb://admin:${MONGO_PASSWORD:-filmssypassword}@mongodb:27017/filmssy?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-filmssyredis}@redis:6379
      ONESIGNAL_APP_ID: ${ONESIGNAL_APP_ID}
      ONESIGNAL_REST_API_KEY: ${ONESIGNAL_REST_API_KEY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL}
    depends_on:
      - mongodb
      - redis
    networks:
      - filmssy-network

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
    container_name: filmssy-analytics
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      MONGODB_URI: mongodb://admin:${MONGO_PASSWORD:-filmssypassword}@mongodb:27017/filmssy?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-filmssyredis}@redis:6379
      MIXPANEL_TOKEN: ${MIXPANEL_TOKEN}
      GOOGLE_ANALYTICS_ID: ${GOOGLE_ANALYTICS_ID}
    depends_on:
      - mongodb
      - redis
    networks:
      - filmssy-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: filmssy-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
      - api
      - admin
    networks:
      - filmssy-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: filmssy-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - filmssy-network

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: filmssy-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - filmssy-network

networks:
  filmssy-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local